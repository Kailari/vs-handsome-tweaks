{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"$id": "configlib-patches.schema.json",
	"title": "ConfigLib Patches",
	"description": "Set of settings, patches that change values in assets and the formatting of the configuration file.",
	"type": "object",
	"additionalProperties": false,
	"properties": {
		"version": {
			"description": "The version of the configuration file. Incrementing version regenerates config files with default values.",
			"type": "integer"
		},

		"file": {
			"description": "Existing ModConfig file the ConfigLib should use instead of generating a YAML file.",
			"type": "string"
		},

		"settings": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"code": true,
					"comment": true,
					"default": true,
					"ingui": true,
					"mapping": true,
					"name": true,
					"range": true,
					"text": true,
					"title": true,
					"type": {
						"description": "The datatype of this setting.",
						"enum": [ "separator", "boolean", "float", "integer", "string", "other" ]
					},
					"values": true,
					"weight": true
				},
				"required": [ "type" ],
				"additionalProperties": false,
				"oneOf": [
					{
						"properties": {
							"code": false,
							"comment": false,
							"default": false,
							"ingui": false,
							"mapping": false,
							"name": false,
							"range": false,
							"text": {
								"description": "Text section shown on this separator on the GUI or the YAML file.",
								"type": "string"
							},
							"title": {
								"description": "The title of this separator on the GUI or in the YAML file.",
								"type": "string"
							},
							"type": { "const": "separator" },
							"values": false,
							"weight": false
						},
						"anyOf": [
							{ "required": [ "title" ] },
							{ "required": [ "text" ] }
						]
					},
					{
						"properties": {
							"code": {
								"description": "The name/path of the setting in the JSON file."
							},
							"comment": {
								"description": "The comment shown on the tooltip in game and as a comment hint in the config file. Can be a translation key.",
								"type": "string"
							},
							"default": {
								"description": "The default value of this setting. Additionally, used when generating a fresh config file.\n\nShould be equal to a valid value from either \"values\" or \"mapping\" if either of those is defined."
							},
							"ingui": {
								"description": "The translation key for the setting or the title of this separator. Defaults to the value of 'code' (for JSON settings) or 'name' (for YAML settings) if not provided.",
								"type": "string"
							},
							"mapping": {
								"description": "Substitute readable name for values.",
								"type": "object"
							},
							"name": {
								"description": "The name of the setting in the YAML file. The '_' and '-' are the only special characters allowed."
							},
							"range": {
								"description": "Specifies a minimum and/or a maximum value, and optionally slider step. If both minimum and maximum are provided, a slider is shown in the GUI.",
								"properties": {
									"min": { "description": "The minimum value." },
									"max": { "description": "The maximum value." },
									"step": { "description": "The slider step/increment size." }
								},
								"dependentRequired": {
									"step": [ "min", "max" ]
								}
							},
							"text": false,
							"title": false,
							"type": {
								"description": "The datatype of the setting.",
								"enum": [ "separator", "boolean", "float", "integer", "string", "other" ]
							},
							"values": {
								"description": "Allowed values for this setting.",
								"type": "array"
							},
							"weight": {
								"description": "Sorting weight of the setting for ordering the settings in the UI. Should be greater than zero.",
								"type": "number",
								"minimum": 0
							}
						},
						"required": [ "default" ],
						"additionalProperties": false,
						"oneOf": [
							{
								"properties": {
									"code": { "type": "string" },
									"comment": true,
									"default": true,
									"ingui": true,
									"mapping": true,
									"name": false,
									"range": true,
									"type": true,
									"values": true,
									"weight": true
								},
								"required": [ "code" ],
								"additionalProperties": false,
								"oneOf": [
									{ "$ref": "#/$defs/value_settings/boolean" },
									{ "$ref": "#/$defs/value_settings/float" },
									{ "$ref": "#/$defs/value_settings/integer" },
									{ "$ref": "#/$defs/value_settings/string" },
									{ "$ref": "#/$defs/value_settings/other" }
								]
							},
							{
								"properties": {
									"code": false,
									"comment": true,
									"default": true,
									"ingui": true,
									"mapping": true,
									"name": { "type": "string" },
									"range": true,
									"type": true,
									"values": true,
									"weight": true
								},
								"required": [ "name" ],
								"additionalProperties": false,
								"oneOf": [
									{ "$ref": "#/$defs/value_settings/boolean" },
									{ "$ref": "#/$defs/value_settings/float" },
									{ "$ref": "#/$defs/value_settings/integer" },
									{ "$ref": "#/$defs/value_settings/string" },
									{ "$ref": "#/$defs/value_settings/other" }
								]
							}
						]
					}
				]
			}
		},
		"patches": { }
	},

	"required": [
		"version"
	],

	"$defs": {
		"value_settings": {
			"boolean": {
				"properties": {
					"type": { "const": "boolean" },
					"default": { "type": "boolean" },
					"mapping": false,
					"range": false,
					"values": false
				}
			},
			"float": {
				"properties": {
					"type": { "const": "number" },
					"default": { "type": "number" },
					"mapping": { "patternProperties": { ".*": { "type": "number" } } },
					"range": {
						"properties": {
							"min": { "type": "number" },
							"max": { "type": "number" },
							"step": { "type": "number" }
						}
					},
					"values": { "items": { "type": "number" } }
				}
			},
			"integer": {
				"properties": {
					"type": { "const": "integer" },
					"default": { "type": "integer" },
					"mapping": { "patternProperties": { ".*": { "type": "integer" } } },
					"range": {
						"properties": {
							"min": { "type": "integer" },
							"max": { "type": "integer" },
							"step": { "type": "integer" }
						}
					},
					"values": { "items": { "type": "integer" } }
				}
			},
			"string": {
				"properties": {
					"type": { "const": "string" },
					"default": { "type": "string" },
					"mapping": false,
					"range": false,
					"values": false
				}
			},
			"other": {
				"properties": {
					"type": { "const": "other" },
					"mapping": true,
					"range": false
				}
			}
		}
	}
}